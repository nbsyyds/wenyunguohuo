{"remainingRequest":"D:\\javaProject\\litemall-master\\litemall-admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\javaProject\\litemall-master\\litemall-admin\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\javaProject\\litemall-master\\litemall-admin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\javaProject\\litemall-master\\litemall-admin\\src\\views\\sys\\admin.vue?vue&type=template&id=bbbefb3a","dependencies":[{"path":"D:\\javaProject\\litemall-master\\litemall-admin\\src\\views\\sys\\admin.vue","mtime":1703663872000},{"path":"D:\\javaProject\\litemall-master\\litemall-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\javaProject\\litemall-master\\litemall-admin\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\javaProject\\litemall-master\\litemall-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\javaProject\\litemall-master\\litemall-admin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}